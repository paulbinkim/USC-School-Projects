==> standard input <==
    head -> next = NULL;    tail = head;  }  else {    DEItem* front = new DEItem;       front -> val = new_val;    front -> next = head;     front -> prev = NULL;        head -> prev = front;    head = front; // Head points to new node  }  count++;}// Adds a new integer to the back of the listvoid DEList::push_back(int new_val){  if (count == 0) {    push_front(new_val);  }  else {    DEItem* temp = new DEItem; // THIS PROBLEM BUG    temp -> val = new_val;    tail -> next = temp;    temp -> next = NULL;    temp -> prev = tail;    tail = temp;  }    count++;}// Removes the front item of the list (if it exists)void DEList::pop_front(){  if (head != NULL) {    DEItem* temp = head;    head = temp -> next;    temp -> prev = NULL;    delete temp;    count--;  }  }// Removes the back item of the list (if it exists)void DEList::pop_back(){  if (tail != NULL) {    DEItem* temp = tail;    tail = temp -> prev;    delete temp;    count--;    if (count == 0) {      head = tail;    }  }  }/*// Extra for debuggingvoid DEList::print_list(){  cout << "Current List: ";  DEItem* temp = head;  while(temp != NULL)  {    cout << temp->val << " ";    temp = temp->next;  }  if(head == NULL)  {    cout << "Current head: NULL";  }  else{    cout << "Current head: " << head->val;  }}*/[A
[A[A
[A[A


